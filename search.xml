<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java修行之路_Redis</title>
      <link href="/2022/02/25/java-xiu-xing-zhi-lu-redis/"/>
      <url>/2022/02/25/java-xiu-xing-zhi-lu-redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis专题"><a href="#Redis专题" class="headerlink" title="Redis专题"></a>Redis专题</h1><h4 id="Redis有哪些数据类型？分别在什么场景下使用比较合适？"><a href="#Redis有哪些数据类型？分别在什么场景下使用比较合适？" class="headerlink" title="Redis有哪些数据类型？分别在什么场景下使用比较合适？"></a>Redis有哪些数据类型？分别在什么场景下使用比较合适？</h4><p>String：存在字符缓存</p><p>hash：主要存在一些简单对象，可以通过key修改对应value</p><p>list：可以key：list，可以实现简单分页</p><p>set：无序集合，可以进行全局去重，可以基于set取两个的交集</p><p>sorted set：排序的set，可做多人分数排名</p><h4 id="Redis过期策略都有哪些？-手写一下LRU代码实现？"><a href="#Redis过期策略都有哪些？-手写一下LRU代码实现？" class="headerlink" title="Redis过期策略都有哪些？ 手写一下LRU代码实现？"></a>Redis过期策略都有哪些？ 手写一下LRU代码实现？</h4><p>过期策略：redis对于过期数据进行删除的策略是定时删除（定时随机抽取一些key进行检查）和惰性删除（在服务调用获取key的时候，顺带检查是否过期，如果过期就进行删除）</p><p>许多内存大量堆积占用redis很大内存后，该怎么做？使用redis内存淘汰（noeviction，新写入内存满后，报错；allkeys-lru，当内存满后，redis会删除最近使用频率最少的key进行删除；allkeys-random，内存满后，redis随机删除某些key；volatile-lru，内存不足时，会删除一些设置过期时间的key进行删除；volatile-random，内存不足，随机从设置过期时间的key中进行删除一些；volatile-ttl，内存不足，随机删除一些即将过期的key）</p><p>手写一下简单LRU代码思路</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUCache</span><span class="token generics"><span class="token punctuation">&lt;</span>k<span class="token punctuation">,</span>v<span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>k<span class="token punctuation">,</span>v<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CACHE_SIZE<span class="token punctuation">;</span><span class="token comment">//传递进来最多能缓存多少数据</span><span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> cacheSize<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//设置一个hashMap的初始化大小，同时最后一个true指的是让linkedhashmap按照访问顺序来进行排序，最近访问的放在头部，最少访问的放在尾部</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cell</span><span class="token punctuation">(</span>cacheSize<span class="token operator">/</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.75f</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation punctuation">@override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> removeEldesEntry（<span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> eldset）<span class="token punctuation">{</span><span class="token comment">//意思是说当map中的数据量大于指定的缓存个数时，就自动删除最老的数据</span><span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> CACHE_SIZE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="如何保证Redis高并发和高可用？Redis主从复制的原理是什么？Redis的哨兵原理能介绍一下吗"><a href="#如何保证Redis高并发和高可用？Redis主从复制的原理是什么？Redis的哨兵原理能介绍一下吗" class="headerlink" title="如何保证Redis高并发和高可用？Redis主从复制的原理是什么？Redis的哨兵原理能介绍一下吗?"></a>如何保证Redis高并发和高可用？Redis主从复制的原理是什么？Redis的哨兵原理能介绍一下吗?</h4><p>写多读少，则需要做异步多线程的处理；针对读多写少的情况，做一下处理</p><p>高并发：主要影响就是单机，对于并发读数据</p><p>架构为主从结构，一主多从，主（master）负责写，并且复制（异步进行）到从（slave）机器中，从（slave）负责读数据，并支持水平扩展</p><h4 id="主从框架的核心原理"><a href="#主从框架的核心原理" class="headerlink" title="主从框架的核心原理"></a>主从框架的核心原理</h4><p>当启动一个slave node的时候，它会发送一个PSYNC命令给master node</p><p>如果这是slave node重新连接master node，那么master node仅仅会复制给slave部分缺少数据；否则如果是slave node第一次连接master node，那么会触发一次full resynchronization</p><p>开始full resynchronization的时候，master会启动一个后台线程，开始生成一份RDB快照文件，同时还会将从客户端收到的所有写命令缓存在内存中。RDB文件生成完毕之后，master会将这个RDB文件发送给slave，slave会先写入本地磁盘，然后再从本地磁盘加载到内存中。然后master会将内存中缓存的写命令发送给slave，slave也是同步这些数据。</p><p>slave node如果跟master node有网络鼓故障，断开了连接，会自动重连。master如果发现有多个slave node都来重新连接，仅仅会启动一个RDB save操作，用一份数据服务所有slave node。</p><h4 id="主从复制的断点续传"><a href="#主从复制的断点续传" class="headerlink" title="主从复制的断点续传"></a>主从复制的断点续传</h4><p>从redis 2.8开始，就支持主从复制的断点续传，如果主从复制过程中，网络连接断掉了，那么可以接着上次复制的地方，继续复制下去，而不是从头开始复制一份</p><p>master node会在内存中常见一个backlog，master和slave都会保存一个replica offset还有一个master id，</p><p>offset就是保存在backlog中的。如果master和slave网络连接断掉了，slave会让master从上次的replica offset开始继续复制</p><p>但是如果没有找到对应的offset，那么就会执行一次resynchronization</p><h4 id="无磁盘化复制"><a href="#无磁盘化复制" class="headerlink" title="无磁盘化复制"></a>无磁盘化复制</h4><p>master在内存中直接创建rdb，然后发送给slave，不会在自己本地落地磁盘了</p><p>repl-diskless-sync</p><p>repl-diskless-sync-delay,等待一定时长再开始复制，因为要等更多slave重新连接过来</p><h4 id="过期key处理"><a href="#过期key处理" class="headerlink" title="过期key处理"></a>过期key处理</h4><p>slave不会过期key，只会等待master过期key，如果master过期了一个key，或者用过LRUt淘汰了一个key，然后会模拟一个del命令发送给slave</p><h4 id="复制的完整流程"><a href="#复制的完整流程" class="headerlink" title="复制的完整流程"></a>复制的完整流程</h4><p>1.slave node启动，仅仅保存master node的信息，包括master node的host和ip，但是复制流程没开始</p><p>2.slave node内部有个定时任务，每秒检查是否有新的master node要连接和复制，如果发现，就跟master node建立socket网络连接</p><p>3.slave node发送ping命令给master node</p><p>4.口令认证，如果master设置了requirepass，那么slave node必须发送masterauth的口令过去进行认证</p><p>5.master node第一次执行全量复制，将所有数据发送slave node</p><p>6.master node后续持续将写命令，异步复制给slave node</p><h4 id="数据同步相关的核心机制"><a href="#数据同步相关的核心机制" class="headerlink" title="数据同步相关的核心机制"></a>数据同步相关的核心机制</h4><p>1.master和slave都会维护一个offset</p><p>master会在自身不断累加offset，slave也会在自身不断累加offset</p><p>slave每秒都会上报自己的offset给master，同时，master也会保存每个slave的offset</p><p>2.backlog</p><p>master node有一个backlog，默认是1M大小</p><p>slave node给slave node复制数据时，也会将数据再backlog中同步写一份</p><p>3.master run id</p><p>info server，可以看到master run id</p><p>如果根据host+ip定位master node，是不靠谱的，如果master node重启或者数据出现了变化，那么slave node应该根据不同的run id区分，run id不同就做全量复制</p><p>如果需要不更改run id 重启redis，可以使用redis-cli debug reload命令</p><p>4.psync</p><p>从节点使用psync从master node 复制，psync runid offset </p><p>master node会根据自身的情况返回响应信息，可能是FULLRESYNC runid offset触发全量复制，</p><p>可能是CONTINUE触发增量复制</p><h4 id="全盘复制"><a href="#全盘复制" class="headerlink" title="全盘复制"></a>全盘复制</h4><p>1.master执行bgsavn，在本地生成一份rdb快照文件</p><p>2.master node将rdb快照文件发送给slave node，如果rdb复制时间超过60秒（repl-timeout），那么slave node就会认为复制失败，可以适当调节大这个参数</p><p>3.对比千兆网卡的机器，一般每秒传输100MB，6G文件，很可能超过60秒</p><p>4.master node 在生成rdb时，会将所有新的写命令缓存在内存中，在slave node保存了rdb之后，再将新的写命令复制给slave node</p><p>5.client-output-buffer-limit slave 256MB 64MB 60，如果在复制期间，内存缓存区持续消耗超过64MB，或者一次性超过256MB，那么停止复制，复制失败</p><p>6.slave node接收到rdb之后，清空自己的旧数据，然后重新加载rdb到自己的内存中，同时基于旧的数据版本对外提供服务</p><p>7.如果slave node开启了AOF，那么会立即执行BGREWRITEAOF，重写AOF</p><p>如果复制的数据量在4G-6G之间，那么很可能会全量复制时间消耗到1分钟半到2分钟</p><h4 id="增量复制"><a href="#增量复制" class="headerlink" title="增量复制"></a>增量复制</h4><p>1.如果全量复制过程中，master-slave网络连接断掉，那么slave重新连接master时，会触发增量复制</p><p>2.master直接从自己的backlog中获取部分丢失的数据，发送给slave node，默认backlog就是1MB</p><p>3.master就是根据slave发送的psynv中的offset来从backlog获取数据的</p><h4 id="heartbeat"><a href="#heartbeat" class="headerlink" title="heartbeat"></a>heartbeat</h4><p>主从节点互相都会发送heartbeat信息</p><p>master默认每隔10秒发送一次heartbeat，slave node每隔1秒发送一个heartbeat</p><h4 id="异步复制"><a href="#异步复制" class="headerlink" title="异步复制"></a>异步复制</h4><p>master每次接收到写命令之后，现在内部写入数据，然后异步发送给slave node</p><h3 id="哨兵（sentinel-）"><a href="#哨兵（sentinel-）" class="headerlink" title="哨兵（sentinel ）"></a>哨兵（sentinel ）</h3><p>哨兵是redis集群架构中非常重要的一个组件，主要功能如下</p><p>1.集群监控，负责监控redis master和slave进程是否正常工作</p><p>2.消息通知，如果某个redis实例有故障，那么哨兵负责发送消息作为报警通知给管理员</p><p>3.故障转移，如果master node挂掉了，会自动转移到slave node上</p><p>4.配置中心，如果故障转移发生了，通知client客户端新的master地址</p><h4 id="哨兵本身也是分布式的，作为一个哨兵集群去运行，互相协同工作"><a href="#哨兵本身也是分布式的，作为一个哨兵集群去运行，互相协同工作" class="headerlink" title="哨兵本身也是分布式的，作为一个哨兵集群去运行，互相协同工作"></a>哨兵本身也是分布式的，作为一个哨兵集群去运行，互相协同工作</h4><p>1.故障转移时，判断一个master node是宕机了，需要大部分的哨兵都同意才行，涉及到了分布式选举的问题</p><p>2.即使部分哨兵节点挂掉了，哨兵集群还是能正常工作的，因为如果一个作为高可用机制重要组成部分的故障转移系统本身是单点的，就很坑了</p><p><strong>目前采用的sentinel  2版本，相比 1版本来说，重写了很多代码，主要是让故障转移的机制和算法变得更加健壮和简单</strong></p><h4 id="哨兵的核心知识"><a href="#哨兵的核心知识" class="headerlink" title="哨兵的核心知识"></a>哨兵的核心知识</h4><p>1.哨兵至少需要3个实例，来保证自己的健壮性</p><p>2.哨兵+redis主从的部署架构，是不会保证数据零丢失的，只能保证redis集群的高可用性</p><p>3.对于哨兵+redis主从这种复杂的部署架构，尽量在测试环境和生成环境，都进行充足的测试和演练</p><h4 id="为什么redis哨兵集群只有2个节点无法正常工作？"><a href="#为什么redis哨兵集群只有2个节点无法正常工作？" class="headerlink" title="为什么redis哨兵集群只有2个节点无法正常工作？"></a>为什么redis哨兵集群只有2个节点无法正常工作？</h4><p>哨兵集群必须部署2个以上节点</p><p>如果哨兵集群仅仅部署了2个哨兵实例，配置 Configuration  ：quorum = 1，majority = 2</p><p>挂掉一个就会受majority参数影响故障转移机制</p><h4 id="经典的3节点哨兵集群"><a href="#经典的3节点哨兵集群" class="headerlink" title="经典的3节点哨兵集群"></a>经典的3节点哨兵集群</h4><p> Configuration  ：quorum = 2，majority = 2</p><h4 id="解决异步复制和脑裂导致的数据丢失"><a href="#解决异步复制和脑裂导致的数据丢失" class="headerlink" title="解决异步复制和脑裂导致的数据丢失"></a>解决异步复制和脑裂导致的数据丢失</h4><p>主要就靠两个参数：min-slaves-to-write  1； min-slaves-max-lag 10</p><p>1.减少异步复制的数据丢失</p><p>有了min-slaves-max-lag这个配置，就可以确保说，一旦slave复制数据和ack延时太长，就认为可能master宕机后损失的数据太多了，那么就拒绝写请求，这样可以把master宕机时由于部分数据未同步slave导致的数据丢失降低的可控范围内</p><p>2.减少脑裂的数据丢失</p><p>如果一个master出现了脑裂，跟其他slave丢了连接，那么上面两个配置可以确保说，如果不能继续给指定数量的slave发送数据，而且slave超过10秒没有给自己ack消息，那么就直接拒绝客户端的写请求</p><p>这样脑裂后的旧master就不会接收client的新数据，也就避免了数据丢失</p><p>上面的配置就确保了，如果跟任何一个slave丢了连接，在10秒后发现没有slave给自己ack，那么就拒绝新的写请求</p><p>因此在脑裂场景下，最多就丢失10秒的数据</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java修行之路_算法</title>
      <link href="/2022/02/24/java-xiu-xing-zhi-lu-suan-fa/"/>
      <url>/2022/02/24/java-xiu-xing-zhi-lu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="算法-二叉树"><a href="#算法-二叉树" class="headerlink" title="算法_二叉树"></a>算法_二叉树</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h4 id="关于二叉树遍历，添加，删除情况套路通用处理"><a href="#关于二叉树遍历，添加，删除情况套路通用处理" class="headerlink" title="关于二叉树遍历，添加，删除情况套路通用处理"></a>关于二叉树遍历，添加，删除情况套路通用处理</h4><blockquote><p>二叉树算法的设计的总路线：明确一个节点要做的事情，然后剩下的事抛给框架</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// root 需要做什么？在这做。</span>    <span class="token comment">// 其他的不用 root 操心，抛给框架</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="热身：1-如何把二叉树所有的节点中的值加一？"><a href="#热身：1-如何把二叉树所有的节点中的值加一？" class="headerlink" title="热身：1. 如何把二叉树所有的节点中的值加一？"></a><strong>热身：1. 如何把二叉树所有的节点中的值加一？</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>val <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">plusOne</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">plusOne</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-如何判断两棵二叉树是否完全相同？"><a href="#2-如何判断两棵二叉树是否完全相同？" class="headerlink" title="2. 如何判断两棵二叉树是否完全相同？"></a><strong>2. 如何判断两棵二叉树是否完全相同？</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root1<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> root2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 都为空的话，显然相同</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 一个为空，一个非空，显然不同</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> root2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 两个都非空，但 val 不一样也不行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root1<span class="token punctuation">.</span>val <span class="token operator">!=</span> root2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// root1 和 root2 该比的都比完了</span>    <span class="token keyword">return</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断-BST-的合法性"><a href="#判断-BST-的合法性" class="headerlink" title="判断 BST 的合法性"></a><strong>判断 BST 的合法性</strong></h4><blockquote><p>二叉搜索树（Binary Search Tree，简称 BST）是一种很常用的的二叉树。它的定义是：一个二叉树中，任意节点的值要大于等于左子树所有节点的值，且要小于等于右边子树的所有节点的值。这种情况，我们可以使用辅助函数，增加函数参数列表，在参数中携带额外信息</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> min<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> min<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> max<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> min<span class="token punctuation">,</span> root<span class="token punctuation">)</span>         <span class="token operator">&amp;&amp;</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在-BST-中查找一个数是否存在"><a href="#在-BST-中查找一个数是否存在" class="headerlink" title="在 BST 中查找一个数是否存在"></a><strong>在 BST 中查找一个数是否存在</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token function">isInBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">isInBST</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isInBST</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用二分查找法"><a href="#使用二分查找法" class="headerlink" title="使用二分查找法"></a>使用二分查找法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token function">isInBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">isInBST</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">isInBST</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="以上算法中可抽象出方法架子（针对遍历的架子）"><a href="#以上算法中可抽象出方法架子（针对遍历的架子）" class="headerlink" title="以上算法中可抽象出方法架子（针对遍历的架子）"></a><strong>以上算法中可抽象出方法架子（针对遍历的架子）</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">BST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token comment">//找到目标，进行操作</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> value<span class="token punctuation">)</span>  <span class="token function">BST</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> value<span class="token punctuation">)</span>  <span class="token function">BST</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在-BST-中插入一个数"><a href="#在-BST-中插入一个数" class="headerlink" title="在 BST 中插入一个数"></a><strong>在 BST 中插入一个数</strong></h4><blockquote><p>对数据结构的操作无非遍历 + 访问，遍历就是“找”，访问就是“改”。具体到这个问题，插入一个数，就是先找到插入位置，然后进行插入操作。涉及“改”，函数就要返回 TreeNode 类型，并且对递归调用的返回值进行接收</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeNode</span> <span class="token function">insertValue</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">insertValue</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">insertValue</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在-BST-中删除一个数"><a href="#在-BST-中删除一个数" class="headerlink" title="在 BST 中删除一个数"></a><strong>在 BST 中删除一个数</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeNode</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token comment">//进行删除</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java修行之路_设计模式</title>
      <link href="/2022/02/22/java-xiu-xing-zhi-lu-she-ji-mo-shi/"/>
      <url>/2022/02/22/java-xiu-xing-zhi-lu-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java修行之路-设计模式六大原则"><a href="#Java修行之路-设计模式六大原则" class="headerlink" title="Java修行之路_设计模式六大原则"></a>Java修行之路_设计模式六大原则</h1><h4 id="修行需知"><a href="#修行需知" class="headerlink" title="修行需知~"></a>修行需知~</h4><p><strong>多态的表象:</strong></p><blockquote><p>（1）类类之间要有继承关系<br>（2）子类要重写父类方法<br>（3）父类引用指向子类对象</p></blockquote><hr><blockquote><p>父类引用调用成员变量，内存地址指向父类内部成员变量。<br>父类引用调用成员方法（不含有static），实际使用子类方法<br>父类引用调用静态方法，实际使用父类内部静态方法<br>【相同】类域的【不同】对象执行【同一】方法的时候会有【不同】的表现<br>父类与子类的相互转换</p></blockquote><hr><h2 id="设计模式六大原则"><a href="#设计模式六大原则" class="headerlink" title="设计模式六大原则"></a>设计模式六大原则</h2><h3 id="单一职责："><a href="#单一职责：" class="headerlink" title="单一职责："></a>单一职责：</h3><blockquote><p>理解：类或方法单一分类，降低耦合性</p></blockquote><ul><li>例子：对于网络请求框架有：请求类，缓存类，配置类等，相互独立处理各自业务，则符合单一职责</li></ul><h3 id="开闭原则："><a href="#开闭原则：" class="headerlink" title="开闭原则："></a>开闭原则：</h3><blockquote><p>理解：代码中的类，模块，函数等其他，开放扩展，闭合修改，为了程序的扩展性更好，维护和升级更简单</p></blockquote><ul><li>例子：~</li></ul><h3 id="里氏替换："><a href="#里氏替换：" class="headerlink" title="里氏替换："></a>里氏替换：</h3><blockquote><p>理解：类继承其他类的时候，通过新扩展的功能来替换需要修改的父类方法引用</p></blockquote><ul><li>例子：~</li></ul><h3 id="依赖倒置："><a href="#依赖倒置：" class="headerlink" title="依赖倒置："></a>依赖倒置：</h3><blockquote><p>理解：高层模块不依赖底层模块，不依赖具体实现类，而依赖抽象接口，便于扩展细节业务</p></blockquote><ul><li>例子：场景体育比赛，同一个运动员，可参加各种运动项目，如果明确运动员参加某项运动，就会被局限住，如果是抽象为参加运动就可以无限扩展</li></ul><h3 id="迪米特法则："><a href="#迪米特法则：" class="headerlink" title="迪米特法则："></a>迪米特法则：</h3><blockquote><p>理解：调用一个类完成业务过程，不必让其了解到内部实现细节</p></blockquote><ul><li>例子：一个系统调用领一个接口系统的时候，可以只提供一个中间介给间接调用接口服务，并不会暴露接口</li></ul><h3 id="接口隔离："><a href="#接口隔离：" class="headerlink" title="接口隔离："></a>接口隔离：</h3><blockquote><p>理解：将接口职责最小化</p></blockquote><ul><li>例子：~</li></ul><p>》 设计模式的好处：合理运用设计模式，可以提高代码可读性，可扩展性，便于阅读维护扩展</p><blockquote><p>后续结合代码例子记录部分常用设计模式使用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis源码业务解读</title>
      <link href="/2022/02/22/mybatis-yuan-ma-ye-wu-jie-du/"/>
      <url>/2022/02/22/mybatis-yuan-ma-ye-wu-jie-du/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis业务源码解读"><a href="#Mybatis业务源码解读" class="headerlink" title="Mybatis业务源码解读"></a>Mybatis业务源码解读</h1><h2 id="JDBC的使用"><a href="#JDBC的使用" class="headerlink" title="JDBC的使用"></a>JDBC的使用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">Strings</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//加载jdbc驱动 至DriverManage中</span>   <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//创建数据库连接connection</span>   <span class="token comment">//String url = "....";</span>   <span class="token comment">//String username = "..."</span>   <span class="token comment">//String password = "..."</span>   <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token class-name">DriverManage</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span>   <span class="token comment">//创建执行sql的statement</span>   <span class="token comment">//1、执行静态SQL语句。通常通过Statement实例实现。</span>   <span class="token comment">//2、执行动态SQL语句。通常通过PreparedStatement实例实现。</span>   <span class="token comment">//3、执行数据库存储过程。通常通过CallableStatement实例实现。</span>   <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token class-name">CallableStatement</span> cstmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareCall</span><span class="token punctuation">(</span><span class="token string">"{CALL demoSp(? , ?)}"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token comment">//执行sql</span>   <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM ..."</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token keyword">int</span> rows <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO ..."</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token keyword">boolean</span> flag <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token comment">//关闭jdbc</span>   <span class="token comment">//先关闭requestSet,再关闭preparedStatement,最后关闭连接对象connection</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis初体验"><a href="#Mybatis初体验" class="headerlink" title="Mybatis初体验"></a>Mybatis初体验</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">Strings</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//获取配置文件</span>    <span class="token class-name">String</span> config <span class="token operator">=</span> <span class="token string">"config.xml"</span><span class="token punctuation">;</span>    <span class="token comment">//获取文件的流</span>    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建SQLSessionFactory</span>    <span class="token class-name">SqlSessionFactory</span> sqlsessionFactory <span class="token operator">=</span> <span class="token keyword">new</span>    <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建能映射文件中sql的sqlsession</span>    <span class="token class-name">SqlSession</span> sqlsession <span class="token operator">=</span> sqlsessionFactory<span class="token punctuation">.</span><span class="token function">openSqlsession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取mapper方法作为唯一key</span>    <span class="token class-name">String</span> methodStatement <span class="token operator">=</span> <span class="token string">"com.mytestdemo.mapper.TestMapper.getUser"</span><span class="token punctuation">;</span>    <span class="token comment">//进行查询操作返回结果</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> sqlsession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis之select业务流程源码分析"><a href="#Mybatis之select业务流程源码分析" class="headerlink" title="Mybatis之select业务流程源码分析"></a>Mybatis之select业务流程源码分析</h2><h3 id="第一阶段-获取动态代理"><a href="#第一阶段-获取动态代理" class="headerlink" title="第一阶段 获取动态代理"></a>第一阶段 获取动态代理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">一、<span class="token class-name">UserMapper</span> usermapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">/</span><span class="token class-name">DefaultSqlSession</span> <span class="token operator">-&gt;</span>  <span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">/</span><span class="token class-name">Configuration</span> <span class="token operator">-&gt;</span> <span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span><span class="token class-name">SqlSession</span> sqlsession<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token operator">/</span><span class="token class-name">MapperRegistry</span>  <span class="token operator">-&gt;</span>  <span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span><span class="token class-name">SqlSession</span> sqlsession<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意返回值Map&lt;Class&lt;?&gt;,MapperProxyFactory&lt;?&gt;&gt;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span><span class="token class-name">MapperProxyFactory</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> kownMappers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span><span class="token class-name">SqlSession</span> sqlsession<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//加载mybatis-config.xml配置的&lt;mapper&gt;配置，根据指定type，找到对应MapperProxyFactory</span>    <span class="token keyword">final</span> <span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperProxyFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> kownMapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//没有配置&lt;mapper&gt;,则找不到对应的MapperProxyFcatory,抛异常</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mapperProxyFactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Type"</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">"is not known to the MapperRegistry."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment">//使用工厂代理，生成MapperProxy的代理对象</span>        <span class="token keyword">return</span> mapperProxyFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>sqlsession<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Error getting mapper instance. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//使用动态代理，创建mapperInerface代理类对象</span><span class="token number">4</span>、<span class="token class-name">MapperProxyFactory</span>  <span class="token operator">-&gt;</span>  <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperProxy<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>        <span class="token comment">//用于创建实现该mapperInter接口的代理对象</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">;</span>        <span class="token comment">//存储Method,MapperMethod对应关系</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span><span class="token class-name">MapperMethod</span><span class="token punctuation">&gt;</span></span> methodCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        。        。        。        <span class="token keyword">protected</span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperProxy<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>mapperInterface<span class="token punctuation">}</span><span class="token punctuation">,</span>mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//创建mapperProxy,没错调用都会创建新的MapperProxy对象，MapperProxy implements InvocationHandler</span>        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>sqlsession<span class="token punctuation">,</span>mapperInterface<span class="token punctuation">,</span>methodCache<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">newInstance</span><span class="token punctuation">(</span>mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//通过创建的MapperProxy代理对象进行调用</span><span class="token number">5</span><span class="token operator">/</span><span class="token class-name">MapperProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token operator">-&gt;</span> <span class="token annotation punctuation">@override</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token comment">//成员变量</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">;</span>  <span class="token comment">//记录关联SqlSession对象</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">;</span>  <span class="token comment">//mapper接口对应的Class对象</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span><span class="token class-name">MapperMethod</span><span class="token punctuation">&gt;</span></span> methodCache<span class="token punctuation">;</span> <span class="token comment">//MapperMethod对象完成参数转换以及SQL语句的执行功能，注意点：MapperMethod中并不是记录任何状态相关的信息，所有可以在多个代理对象之间共享</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">/** 如果被代理的方法是Object类的方法，如toString()、clone()，则不进行代理 */</span>            <span class="token comment">// eg1: method.getDeclaringClass()==interface mapper.UserMapper  由于被代理的方法是UserMapper的getUserById方法，而不是Object的方法，所以返回false</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">/** 如果是接口中的default方法，则调用default方法 */</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDefaultMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// eg1: 不是default方法，返回false</span>                <span class="token keyword">return</span> <span class="token function">invokeDefaultMethod</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token class-name">ExceptionUtil</span><span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// eg1: method = public abstract vo.User mapper.UserMapper.getUserById(java.lang.Long)</span>        <span class="token comment">/** 初始化一个MapperMethod并放入缓存中 或者 从缓存中取出之前的MapperMethod */</span>        <span class="token keyword">final</span> <span class="token class-name">MapperMethod</span> mapperMethod <span class="token operator">=</span> <span class="token function">cachedMapperMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// eg1: sqlSession = DefaultSqlSession@1953  args = {2L}</span>        <span class="token comment">/** 调用MapperMethod.execute()方法执行SQL语句 */</span>        <span class="token keyword">return</span> mapperMethod<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// eg1: public abstract vo.User mapper.UserMapper.getUserById(java.lang.Long)</span>    <span class="token keyword">private</span> <span class="token class-name">MapperMethod</span> <span class="token function">cachedMapperMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * 在缓存中查找MapperMethod，若没有，则创建MapperMethod对象，并添加到methodCache集合中缓存         */</span>        <span class="token comment">// eg1: 因为methodCache为空，所以mapperMethod等于null</span>        <span class="token class-name">MapperMethod</span> mapperMethod <span class="token operator">=</span> methodCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mapperMethod <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// eg1: 构建mapperMethod对象，并维护到缓存methodCache中 （第二阶段操作）</span>            mapperMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperMethod</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">,</span> method<span class="token punctuation">,</span> sqlSession<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: method = public abstract vo.User mapper.UserMapper.getUserById(java.lang.Long)</span>            methodCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> mapperMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mapperMethod<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二阶段-获取MethodMapper对象"><a href="#第二阶段-获取MethodMapper对象" class="headerlink" title="第二阶段 获取MethodMapper对象"></a>第二阶段 获取MethodMapper对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span>、<span class="token class-name">MapperMethod</span>    <span class="token comment">//成员变量</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SqlCommand</span> command<span class="token punctuation">;</span><span class="token comment">//（SQL指令）记录SQL语句名称和类型</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MethodSignature</span> method<span class="token punctuation">;</span><span class="token comment">//（方法签名）Mapper接口中对应方法的相关信息</span><span class="token comment">// eg1: mapperInterface = interface mapper.UserMapper</span>    <span class="token comment">//      method = public abstract vo.User mapper.UserMapper.getUserById(java.lang.Long)</span>    <span class="token keyword">public</span> <span class="token class-name">MapperMethod</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Configuration</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlCommand</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> mapperInterface<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodSignature</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> mapperInterface<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// eg1: mapperInterface = interface mapper.UserMapper</span>    <span class="token comment">//method = public abstract vo.User mapper.UserMapper.getUserById(java.lang.Long)</span><span class="token keyword">public</span> <span class="token class-name">SqlCommand</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// eg1: getUserById</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: interface mapper.UserMapper</span>    <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> declaringClass <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * String statementId = mapperInterface.getName() + "." + methodName;     * 尝试通过statementId，从Configuration中获得MappedStatement     */</span>    <span class="token class-name">MappedStatement</span> ms <span class="token operator">=</span> <span class="token function">resolveMappedStatement</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> declaringClass<span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: ms不为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ms <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Flush</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            type <span class="token operator">=</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span>FLUSH<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Invalid bound statement (not found): "</span>                    <span class="token operator">+</span> mapperInterface<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eg1: name = mapper.UserMapper.getUserById</span>        type <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getSqlCommandType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eg1: type = SqlCommandType.SELECT</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span>UNKNOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Unknown execution method for: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment">// eg1: mapperInterface = interface mapper.UserMapper</span><span class="token comment">//      method = public abstract vo.User mapper.UserMapper.getUserById(java.lang.Long)</span><span class="token keyword">public</span> <span class="token class-name">MethodSignature</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Type</span> resolvedReturnType <span class="token operator">=</span> <span class="token class-name">TypeParameterResolver</span><span class="token punctuation">.</span><span class="token function">resolveReturnType</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> mapperInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: resolvedReturnType = vo.User.class</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedReturnType <span class="token keyword">instanceof</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// eg1: returnType = resolvedReturnType = class vo.User</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>returnType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> resolvedReturnType<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedReturnType <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>returnType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> resolvedReturnType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// eg1: returnsVoid = false</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>returnsVoid <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: returnsMany = false</span>    <span class="token comment">/** 判断returnType是集合或者数组吗？ */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>returnsMany <span class="token operator">=</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getObjectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isCollection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnType<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>returnType<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: returnsCursor = false</span>    <span class="token comment">/** 判断returnType是Cursor类型吗？ */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>returnsCursor <span class="token operator">=</span> <span class="token class-name">Cursor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: mapKey = null，returnsMap = false</span>    <span class="token comment">/** 判断returnType是Map类型吗？ */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mapKey <span class="token operator">=</span> <span class="token function">getMapKey</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>returnsMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mapKey <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1：rowBoundsIndex = null</span>    <span class="token comment">/** 获得方法method中，入参为RowBounds类型的下标号 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rowBoundsIndex <span class="token operator">=</span> <span class="token function">getUniqueParamIndex</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1：resultHandlerIndex = null</span>    <span class="token comment">/** 获得方法method中，入参为ResultHandler类型的下标号 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resultHandlerIndex <span class="token operator">=</span> <span class="token function">getUniqueParamIndex</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1:生成paramNameResolver实例对象</span>    <span class="token comment">/** 生成paramNameResolver实例对象, 构造方法中已经对参数序号和参数名称进行了映射 */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>paramNameResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParamNameResolver</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建MethodSignature方法签名"><a href="#创建MethodSignature方法签名" class="headerlink" title="创建MethodSignature方法签名"></a>创建MethodSignature方法签名</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//内部类</span><span class="token number">1.</span>MethodSignature  <span class="token comment">//（方法签名）</span>       <span class="token comment">//变量</span>        <span class="token keyword">boolean</span> returnsMany<span class="token punctuation">;</span>   <span class="token comment">//判断返回类型是集合或数组</span>    <span class="token keyword">boolean</span> returnsMap<span class="token punctuation">;</span><span class="token comment">//判断返回类型是否为Map类型</span>    <span class="token keyword">boolean</span> returnsVoid<span class="token punctuation">;</span>  <span class="token comment">//判断返回类型是否为void</span>        <span class="token keyword">boolean</span> returnsCursor<span class="token punctuation">;</span> <span class="token comment">//判断返回类型是否为Cursor（指针）</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> returnType<span class="token punctuation">;</span>  <span class="token comment">//方法返回类型</span><span class="token class-name">String</span> mapKey<span class="token punctuation">;</span>   <span class="token comment">//获得@MapKey注解里面的value值</span><span class="token class-name">Integer</span> resultHandlerIndex<span class="token punctuation">;</span>  <span class="token comment">//入参ResultHander类型的下标号</span><span class="token class-name">Integer</span> rowBoundsIndex    <span class="token comment">//入参为RowBounds类型下标号</span>         <span class="token class-name">ParamNameResolver</span> paramNameResolver   <span class="token comment">//入参名称解析器</span><span class="token comment">//构造函数</span>    <span class="token comment">// eg1: mapperInterface = interface mapper.UserMapper</span>        <span class="token comment">//      method = public abstract vo.User mapper.UserMapper.getUserById(java.lang.Long)</span>        <span class="token keyword">public</span> <span class="token class-name">MethodSignature</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Type</span> resolvedReturnType <span class="token operator">=</span> <span class="token class-name">TypeParameterResolver</span><span class="token punctuation">.</span><span class="token function">resolveReturnType</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> mapperInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: resolvedReturnType = vo.User.class</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedReturnType <span class="token keyword">instanceof</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// eg1: returnType = resolvedReturnType = class vo.User</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>returnType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> resolvedReturnType<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedReturnType <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>returnType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> resolvedReturnType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// eg1: returnsVoid = false</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>returnsVoid <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: returnsMany = false</span>            <span class="token comment">/** 判断returnType是集合或者数组吗？ */</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>returnsMany <span class="token operator">=</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getObjectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isCollection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnType<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>returnType<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: returnsCursor = false</span>            <span class="token comment">/** 判断returnType是Cursor类型吗？ */</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>returnsCursor <span class="token operator">=</span> <span class="token class-name">Cursor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: mapKey = null，returnsMap = false</span>            <span class="token comment">/** 判断returnType是Map类型吗？ */</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mapKey <span class="token operator">=</span> <span class="token function">getMapKey</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>returnsMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mapKey <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1：rowBoundsIndex = null</span>            <span class="token comment">/** 获得方法method中，入参为RowBounds类型的下标号 */</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>rowBoundsIndex <span class="token operator">=</span> <span class="token function">getUniqueParamIndex</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1：resultHandlerIndex = null</span>            <span class="token comment">/** 获得方法method中，入参为ResultHandler类型的下标号 */</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>resultHandlerIndex <span class="token operator">=</span> <span class="token function">getUniqueParamIndex</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1:生成paramNameResolver实例对象</span>            <span class="token comment">/** 生成paramNameResolver实例对象, 构造方法中已经对参数序号和参数名称进行了映射 */</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>paramNameResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParamNameResolver</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">// eg1: method = public abstract vo.User mapper.UserMapper.getUserById(java.lang.Long)</span>    <span class="token comment">/**     * 解析方法入参，维护到names中。     */</span>    <span class="token keyword">public</span> <span class="token class-name">ParamNameResolver</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> config<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// eg1: paramTypes[0] = Long.class</span>        <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// eg1: paramAnnotations[0][0] = @org.apache.ibatis.annotations.Param(value=id)</span>        <span class="token comment">/**         * 首先举个例子:         * @RedisScan         * public void save(@RedisSave() int id, @RedisSave() String name){         *  ... ...         * }         *         * Annotation[][] annos = method.getParameterAnnotations();         * 二维数组中：第一个参数下标为0，第二参数下标为1         * 即：annos[0][0]=RedisSave 和 annos[1][0]=RedisSave，也就是说,二维数组是包含多个仅有一个值的数组。         * 因为参数前可以添加多个注解，所以是二维数组；一个参数上不可以添加相同的注解，同一个注解可以加在不同的参数上。         */</span>        <span class="token keyword">final</span> <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramAnnotations <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// eg1: paramCount = 1</span>        <span class="token keyword">int</span> paramCount <span class="token operator">=</span> paramAnnotations<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">/**         * get names from @Param annotations         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> paramIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> paramIndex <span class="token operator">&lt;</span> paramCount<span class="token punctuation">;</span> paramIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 判断是否是特殊的参数——即：RowBounds.class或ResultHandler.class</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSpecialParameter</span><span class="token punctuation">(</span>paramTypes<span class="token punctuation">[</span>paramIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: paramAnnotations[0] = @org.apache.ibatis.annotations.Param(value=id)</span>            <span class="token comment">/** 使用@Param指定的入参名称 */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span> annotation <span class="token operator">:</span> paramAnnotations<span class="token punctuation">[</span>paramIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token keyword">instanceof</span> <span class="token class-name">Param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    hasParamAnnotation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment">// eg1: name = "id"</span>                    name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Param</span><span class="token punctuation">)</span> annotation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">/** 没有使用@Param指定的入参名称 */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">/** @Param was not specified；useActualParamName默认值为true*/</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isUseActualParamName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">/** use the parameter index as the name ("arg0", "arg1", ...) */</span>                    name <span class="token operator">=</span> <span class="token function">getActualParamName</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> paramIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">/** use the parameter index as the name ("0", "1", ...) */</span>                    name <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">// eg1: paramIndex=0  name="id"</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>paramIndex<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// eg1: names={0:"id"}</span>        names <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableSortedMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建SqlCommand（sql指令）"><a href="#创建SqlCommand（sql指令）" class="headerlink" title="创建SqlCommand（sql指令）"></a>创建SqlCommand（sql指令）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SqlCommand</span>  内部类<span class="token punctuation">(</span><span class="token class-name">Sql</span>指令<span class="token punctuation">)</span>    <span class="token comment">//变量</span>     <span class="token comment">//MappedStatement的唯一标识id</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//sql的命令类型 UNKNOWN, INSERT, UPDATE, DELETE, SELECT, FLUSH;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SqlCommandType</span> type<span class="token punctuation">;</span><span class="token comment">//构造方法</span><span class="token comment">// eg1: mapperInterface = interface mapper.UserMapper</span>        <span class="token comment">//      method = public abstract vo.User mapper.UserMapper.getUserById(java.lang.Long)</span>        <span class="token keyword">public</span> <span class="token class-name">SqlCommand</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// eg1: getUserById</span>            <span class="token keyword">final</span> <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: interface mapper.UserMapper</span>            <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> declaringClass <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * String statementId = mapperInterface.getName() + "." + methodName;             * 尝试通过statementId，从Configuration中获得MappedStatement             */</span>            <span class="token class-name">MappedStatement</span> ms <span class="token operator">=</span> <span class="token function">resolveMappedStatement</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> declaringClass<span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: ms不为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ms <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Flush</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    type <span class="token operator">=</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span>FLUSH<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Invalid bound statement (not found): "</span>                            <span class="token operator">+</span> mapperInterface<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                name <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eg1: name = mapper.UserMapper.getUserById</span>                type <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getSqlCommandType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eg1: type = SqlCommandType.SELECT</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span>UNKNOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Unknown execution method for: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三阶段-根据SqlSession判断执行哪种（query，insert，update，delete）SQL"><a href="#第三阶段-根据SqlSession判断执行哪种（query，insert，update，delete）SQL" class="headerlink" title="第三阶段 根据SqlSession判断执行哪种（query，insert，update，delete）SQL"></a>第三阶段 根据SqlSession判断执行哪种（query，insert，update，delete）SQL</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//MapperMethod类中</span><span class="token comment">/**     * MapperMethod采用命令模式运行，根据上下文跳转，它可能跳转到许多方法中。实际上它最后就是通过SqlSession对象去运行对象的SQL。     */</span>    <span class="token comment">// eg1: sqlSession = DefaultSqlSession@1953  args = {2L}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> result<span class="token punctuation">;</span>        <span class="token comment">// eg1: command.getType() = SELECT</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> INSERT<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> UPDATE<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> DELETE<span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> SELECT<span class="token operator">:</span>                <span class="token comment">// eg1: method.returnsVoid() = false  method.hasResultHandler() = false</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">hasResultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">executeWithResultHandler</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// eg1: method.returnsMany() = false</span>                    result <span class="token operator">=</span> <span class="token function">executeForMany</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// eg1: method.returnsMap() = false</span>                    result <span class="token operator">=</span> <span class="token function">executeForMap</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// eg1: method.returnsCursor() = false</span>                    result <span class="token operator">=</span> <span class="token function">executeForCursor</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">// eg1: args = {2L}</span>                    <span class="token comment">/** 将参数转换为sql语句需要的入参 */</span>                    <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// eg1: command.getName()="mapper.UserMapper.getUserById" param={"id":2L, "param1":2L} sqlSession=DefaultSqlSession</span>                    <span class="token comment">/** 执行sql查询操作 */</span>                    result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FLUSH<span class="token operator">:</span>                result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">flushStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Unknown execution method for: "</span> <span class="token operator">+</span> command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Mapper method '"</span> <span class="token operator">+</span> command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">" attempted to return null from a method with a primitive return type ("</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">")."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四阶段-查询前对参数，环境做缓存处理"><a href="#第四阶段-查询前对参数，环境做缓存处理" class="headerlink" title="第四阶段  查询前对参数，环境做缓存处理"></a>第四阶段  查询前对参数，环境做缓存处理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//MapperMethod  -&gt;  execute(SqlSession sqlsession,Object[] args)</span><span class="token comment">//Object result = sqlsession.selectOne(command.getName(),param);</span><span class="token comment">//DefaultSqlSession -&gt; selectList(String statement,Object parameter,RowBounds rowBounds)</span><span class="token comment">// eg1: statement="mapper.UserMapper.getUserById" parameter={"id":2L, "param1":2L}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// eg1: statement="mapper.UserMapper.getUserById"</span>            <span class="token class-name">MappedStatement</span> ms <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: executor=CachingExecutor</span>            <span class="token comment">//      wrapCollection(parameter)=parameter={"id": 2L, "param1", 2L}</span>            <span class="token comment">//      rowBounds=RowBounds.DEFAULT=new RowBounds()</span>            <span class="token comment">//      Executor.NO_RESULT_HANDLER=null</span>            <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> <span class="token function">wrapCollection</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span>NO_RESULT_HANDLER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error querying database.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//BaseExecutor -&gt;  query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token comment">//获取绑定sql</span>        <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//处理映射声明，参数，行绑定，结果处理，生成一，二级缓存</span>        <span class="token class-name">CacheKey</span> key <span class="token operator">=</span> <span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CacheKey</span> key <span class="token operator">=</span> <span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// eg1: parameter = {"id": 2L, "param1", 2L}  rowBounds = new RowBounds() resultHandler = null</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span>                             <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"executing a query"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// eg1: closed = false</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Executor was closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// eg1: queryStack = 0  ms.isFlushCacheRequired() = false</span>        <span class="token comment">/** 如果配置了flushCacheRequired=true并且queryStack=0（没有正在执行的查询操作），则会执行清空缓存操作*/</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ms<span class="token punctuation">.</span><span class="token function">isFlushCacheRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">/** 记录正在执行查询操作的任务数*/</span>            queryStack<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// eg1: queryStack=1</span>            <span class="token comment">// eg1: resultHandler=null localCache.getObject(key)=null</span>            <span class="token comment">/** localCache维护一级缓存，试图从一级缓存中获取结果数据，如果有数据，则返回结果；如果没有数据，再执行queryFromDatabase */</span>            list <span class="token operator">=</span> resultHandler <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> localCache<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: list = null</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">/** 如果是执行存储过程 */</span>                <span class="token function">handleLocallyCachedOutputParameters</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> key<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// eg1: parameter = {"id": 2L, "param1", 2L}  rowBounds = new RowBounds() resultHandler = null</span>                list <span class="token operator">=</span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            queryStack<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">/** 延迟加载处理 */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DeferredLoad</span> deferredLoad <span class="token operator">:</span> deferredLoads<span class="token punctuation">)</span> <span class="token punctuation">{</span>                deferredLoad<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// issue #601</span>            deferredLoads<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: configuration.getLocalCacheScope()=SESSION</span>            <span class="token comment">/** 如果设置了&lt;setting name="localCacheScope" value="STATEMENT"/&gt;，则会每次执行完清空缓存。即：使得一级缓存失效 */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getLocalCacheScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">LocalCacheScope</span><span class="token punctuation">.</span>STATEMENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// issue #482</span>                <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第五阶段-执行BD操作"><a href="#第五阶段-执行BD操作" class="headerlink" title="第五阶段  执行BD操作"></a>第五阶段  执行BD操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//BaseExecutor -&gt; queryFromDatabase()(MappedStatement ms, Object parameter, RowBounds ,ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span><span class="token comment">// eg1: parameter = {"id": 2L, "param1", 2L}  rowBounds = new RowBounds() resultHandler = null</span>    <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span>                                          <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>        <span class="token comment">// eg1: key =-445449180:-48278933:mapper.UserMapper.getUserById:0:2147483647:select id, name, age from tb_user where id = ?:2:dev</span>        localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> EXECUTION_PLACEHOLDER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// eg1: SimpleExecutor.doQuery parameter = {"id": 2L, "param1", 2L}  rowBounds = new RowBounds() resultHandler = null</span>            list <span class="token operator">=</span> <span class="token function">doQuery</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            localCache<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/** 将查询结果放到一级缓存中，如果同一session中有相同查询操作，则可以直接从缓存中获取结果*/</span>        localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// eg1: ms.getStatementType() = PREPARED</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">StatementType</span><span class="token punctuation">.</span>CALLABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            localOutputParameterCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//SimpleExecutor -&gt; doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler,BoundSql boundSql)</span><span class="token comment">// eg1: parameter = {"id": 2L, "param1", 2L}  rowBounds = new RowBounds() resultHandler = null</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">doQuery</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span>                               <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/** 根据Configuration来构建StatementHandler */</span>            <span class="token class-name">StatementHandler</span> handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span>                    resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: handler=RoutingStatementHandler</span>            <span class="token comment">/** 然后使用prepareStatement方法，对SQL进行预编译并设置入参 */</span>            stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: handler=RoutingStatementHandler parameter = {"id": 2L, "param1", 2L}  rowBounds = new RowBounds() resultHandler = null</span>            <span class="token comment">/** 开始执行真正的查询操作。将包装好的Statement通过StatementHandler来执行，并把结果传递给resultHandler */</span>            <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">/**     * 构建RoutingStatementHandler，并添加到拦截器链interceptorChain中     */</span>    <span class="token comment">// eg1: parameter = {"id": 2L, "param1", 2L}  rowBounds = new RowBounds() resultHandler = null</span>    <span class="token keyword">public</span> <span class="token class-name">StatementHandler</span> <span class="token function">newStatementHandler</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span><span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StatementHandler</span> statementHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoutingStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span>rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// eg1: interceptorChain中是空Chain，由于interceptorChain中没有执行addInterceptor()来添加Interceptor，所以执行pluginAll这个也是徒劳的。</span>        statementHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StatementHandler</span><span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>statementHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// eg1: statementHandler=PreparedStatementHandler</span>        <span class="token keyword">return</span> statementHandler<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//SimpleExecutor -&gt; prepareStatement(StatementHandler handler, Log statementLog) =&gt; Statement</span>     <span class="token comment">/** * 使用prepareStatement方法，对SQL编译并设置入参 * * @param handler * @param statementLog * @return * @throws SQLException */</span><span class="token comment">// eg1: handler=RoutingStatementHandler</span><span class="token keyword">private</span> <span class="token class-name">Statement</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token class-name">StatementHandler</span> handler<span class="token punctuation">,</span> <span class="token class-name">Log</span> statementLog<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">Statement</span> stmt<span class="token punctuation">;</span>    <span class="token comment">/** 获得Connection实例 */</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span>statementLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: handler=RoutingStatementHandler</span>    <span class="token comment">/** 调用了StatementHandler的prepared进行了sql的预编译 */</span>    stmt <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 通过PreparedStatementHandler的parameterize来给sql设置入参 */</span>    handler<span class="token punctuation">.</span><span class="token function">parameterize</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: 返回org.apache.ibatis.logging.jdbc.PreparedStatementLogger@2e570ded</span>    <span class="token keyword">return</span> stmt<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">//BaseStatementHandler -&gt; prepare(Connection connection, Integer transactionTimeout) =&gt; Statement</span>  <span class="token comment">// eg1: delegate=PreparedStatementHandler</span><span class="token comment">/** * 执行预编译语句 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Statement</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">Integer</span> transactionTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// eg1: 调用PreparedStatementHandler的instantiateStatement</span>        statement <span class="token operator">=</span> <span class="token function">instantiateStatement</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setStatementTimeout</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> transactionTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFetchSize</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> statement<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">closeStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">closeStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Error preparing statement.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment">//接口StatementHandler -&gt; PreparedStatementHandler.parameterize(Statement statement)      </span> <span class="token comment">//-&gt;DefaultParameterHandler.setParameters(PreparedStatement ps)           </span> <span class="token comment">// eg1: org.apache.ibatis.logging.jdbc.PreparedStatementLogger@2e570ded</span><span class="token comment">/** * 针对预处理语句，设置入参 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setParameters</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"setting parameters"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: parameterMappings[0] = ParameterMapping{property='id', mode=IN, javaType=class java.lang.Long, jdbcType=null, numericScale=null, resultMapId='null', jdbcTypeName='null', expression='null'}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">&gt;</span></span> parameterMappings <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterMappings <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// eg1: parameterMappings.size() = 1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameterMappings<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ParameterMapping</span> parameterMapping <span class="token operator">=</span> parameterMappings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// eg1: parameterMapping.getMode() = IN</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterMapping<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">ParameterMode</span><span class="token punctuation">.</span>OUT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Object</span> value<span class="token punctuation">;</span>                <span class="token comment">// eg1: propertyName="id"</span>                <span class="token class-name">String</span> propertyName <span class="token operator">=</span> parameterMapping<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// eg1: boundSql.hasAdditionalParameter(propertyName) = false</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>boundSql<span class="token punctuation">.</span><span class="token function">hasAdditionalParameter</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// issue #448 ask first for additional params</span>                    value <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getAdditionalParameter</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// eg1: parameterObject = 2</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// eg1: parameterObject.getClass() = java.lang.Long.class   返回ture</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>typeHandlerRegistry<span class="token punctuation">.</span><span class="token function">hasTypeHandler</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// eg1: value = parameterObject = 2L</span>                    value <span class="token operator">=</span> parameterObject<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token class-name">MetaObject</span> metaObject <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newMetaObject</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>                    value <span class="token operator">=</span> metaObject<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// eg1: typeHandler=class java.lang.Long</span>                <span class="token class-name">TypeHandler</span> typeHandler <span class="token operator">=</span> parameterMapping<span class="token punctuation">.</span><span class="token function">getTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// eg1: jdbcType=null</span>                <span class="token class-name">JdbcType</span> jdbcType <span class="token operator">=</span> parameterMapping<span class="token punctuation">.</span><span class="token function">getJdbcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// eg1: value=2L jdbcType=null</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> jdbcType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    jdbcType <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getJdbcTypeForNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment">// eg1: typeHandler=BaseTypeHandler</span>                    <span class="token comment">/** 针对预处理语句，设置入参 */</span>                    typeHandler<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> jdbcType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TypeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeException</span><span class="token punctuation">(</span><span class="token string">"Could not set parameters for mapping: "</span> <span class="token operator">+</span> parameterMapping <span class="token operator">+</span>                            <span class="token string">". Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeException</span><span class="token punctuation">(</span><span class="token string">"Could not set parameters for mapping: "</span> <span class="token operator">+</span> parameterMapping <span class="token operator">+</span>                            <span class="token string">". Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token comment">//PreparedStatementHandler.query(Statement statement, ResultHandler resultHandler) =&gt; List&lt;E&gt;                      </span><span class="token comment">// eg1: delegate = PreparedStatementHandler  resultHandler = null</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token comment">/** 最终还是使用JDBC去进行数据操作 */</span>    <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span><span class="token punctuation">)</span> statement<span class="token punctuation">;</span>    <span class="token comment">/** 执行查询操作 */</span>    ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: 封装结果集 resultSetHandler=DefaultResultSetHandler</span>    <span class="token comment">/** 将结果集进行封装 */</span>    <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">.</span><span class="token function">handleResultSets</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第六阶段</span><span class="token punctuation">}</span>                                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第六阶段-针对ResultSet结果转换为POJO"><a href="#第六阶段-针对ResultSet结果转换为POJO" class="headerlink" title="第六阶段  针对ResultSet结果转换为POJO"></a>第六阶段  针对ResultSet结果转换为POJO</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 处理数据库操作的结果集 */</span><span class="token comment">// eg1: 执行到这里</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleResultSets</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> stmt<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"handling results"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> multipleResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> resultSetCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/** 首先：获得执行后的结果集，并封装到ResultSetWrapper */</span>    <span class="token class-name">ResultSetWrapper</span> rsw <span class="token operator">=</span> <span class="token function">getFirstResultSet</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 其次：如果rsw != null &amp;&amp; resultMapCount &lt; 1，则抛异常ExecutorException */</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultMap</span><span class="token punctuation">&gt;</span></span> resultMaps <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> resultMapCount <span class="token operator">=</span> resultMaps<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eg1: resultMapCount = 1</span>    <span class="token function">validateResultMapsCount</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMapCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: rsw不为空 resultMapCount=1 resultSetCount=0</span>    <span class="token comment">/** 第三步：处理结果集 */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>rsw <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> resultMapCount <span class="token operator">&gt;</span> resultSetCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// eg1: ResultMap resultMap=resultMaps.get(0);</span>        <span class="token class-name">ResultMap</span> resultMap <span class="token operator">=</span> resultMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resultSetCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/** 处理结果集, 存储在multipleResults中 */</span>        <span class="token function">handleResultSet</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> multipleResults<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// eg1: rsw=null</span>        rsw <span class="token operator">=</span> <span class="token function">getNextResultSet</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">cleanUpAfterHandlingResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resultSetCount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// eg1: 自增后resultSetCount=1</span>    <span class="token punctuation">}</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resultSets <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: resultSets = null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSets <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rsw <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> resultSetCount <span class="token operator">&lt;</span> resultSets<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ResultMapping</span> parentMapping <span class="token operator">=</span> nextResultMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resultSets<span class="token punctuation">[</span>resultSetCount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parentMapping <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> nestedResultMapId <span class="token operator">=</span> parentMapping<span class="token punctuation">.</span><span class="token function">getNestedResultMapId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ResultMap</span> resultMap <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getResultMap</span><span class="token punctuation">(</span>nestedResultMapId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">handleResultSet</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> parentMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rsw <span class="token operator">=</span> <span class="token function">getNextResultSet</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">cleanUpAfterHandlingResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultSetCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// eg1: multipleResults.get(0).get(0) = User{id=2, name='muse2', age=24, userContacts=null}</span>    <span class="token comment">/** 返回结果 */</span>    <span class="token keyword">return</span> <span class="token function">collapseSingleResultList</span><span class="token punctuation">(</span>multipleResults<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取执行结果ResultSetWrapper"><a href="#获取执行结果ResultSetWrapper" class="headerlink" title="获取执行结果ResultSetWrapper"></a>获取执行结果ResultSetWrapper</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// eg1: 执行到这里</span><span class="token keyword">private</span> <span class="token class-name">ResultSetWrapper</span> <span class="token function">getFirstResultSet</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> stmt<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token comment">// eg1: rs != null</span>    <span class="token comment">/** 通过JDBC获得结果集ResultSet */</span>    <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">getResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt<span class="token punctuation">.</span><span class="token function">getMoreResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">getResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">/**             * getUpdateCount()==-1,既不是结果集,又不是更新计数了.说明没的返回了。             * 如果getUpdateCount()&gt;=0,则说明当前指针是更新计数(0的时候有可能是DDL指令)。             * 无论是返回结果集或是更新计数,那么则可能还继续有其它返回。             * 只有在当前指指针getResultSet()==null &amp;&amp; getUpdateCount()==-1才说明没有再多的返回。             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt<span class="token punctuation">.</span><span class="token function">getUpdateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// no more results. Must be no resultset</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// eg1: rs不为空，则将结果集封装到ResultSetWrapper中</span>    <span class="token comment">/** 将结果集ResultSet封装到ResultSetWrapper实例中 */</span>    <span class="token keyword">return</span> rs <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ResultSetWrapper</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> configuration<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="处理结果集"><a href="#处理结果集" class="headerlink" title="处理结果集"></a>处理结果集</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// eg1: parentMapping = null</span><span class="token comment">/** * 处理结果集 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleResultSet</span><span class="token punctuation">(</span><span class="token class-name">ResultSetWrapper</span> rsw<span class="token punctuation">,</span> <span class="token class-name">ResultMap</span> resultMap<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> multipleResults<span class="token punctuation">,</span>                             <span class="token class-name">ResultMapping</span> parentMapping<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// eg1: parentMapping = null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parentMapping <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">handleRowValues</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span> parentMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// eg1: resultHandler = null</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// eg1: objectFactory = DefaultObjectFactory defaultResultHandler里面包含了一个空集合的ArrayList实例</span>                <span class="token comment">/** 初始化ResultHandler实例，用于解析查询结果并存储于该实例对象中 */</span>                <span class="token class-name">DefaultResultHandler</span> defaultResultHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResultHandler</span><span class="token punctuation">(</span>objectFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/** 解析行数据 */</span>                <span class="token function">handleRowValues</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> defaultResultHandler<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                multipleResults<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>defaultResultHandler<span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">handleRowValues</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment">// eg1：</span>        <span class="token comment">/** 关闭ResultSet */</span>        <span class="token function">closeResultSet</span><span class="token punctuation">(</span>rsw<span class="token punctuation">.</span><span class="token function">getResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="解析行数据handleRowValues"><a href="#解析行数据handleRowValues" class="headerlink" title="解析行数据handleRowValues"></a>解析行数据handleRowValues</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// eg1: parentMapping = null</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRowValues</span><span class="token punctuation">(</span><span class="token class-name">ResultSetWrapper</span> rsw<span class="token punctuation">,</span> <span class="token class-name">ResultMap</span> resultMap<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultHandler<span class="token punctuation">,</span>                            <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultMapping</span> parentMapping<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token comment">// eg1: resultMap.hasNestedResultMaps()=false</span>    <span class="token comment">/** 是否是聚合Nested类型的结果集 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultMap<span class="token punctuation">.</span><span class="token function">hasNestedResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureNoRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkResultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">handleRowValuesForNestedResultMap</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> parentMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// eg1: parentMapping = null</span>        <span class="token function">handleRowValuesForSimpleResultMap</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> parentMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="非聚合Nested结果集"><a href="#非聚合Nested结果集" class="headerlink" title="非聚合Nested结果集"></a>非聚合Nested结果集</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// eg1: parentMapping = null</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleRowValuesForSimpleResultMap</span><span class="token punctuation">(</span><span class="token class-name">ResultSetWrapper</span> rsw<span class="token punctuation">,</span> <span class="token class-name">ResultMap</span> resultMap<span class="token punctuation">,</span>                                               <span class="token class-name">ResultHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span>                                               <span class="token class-name">ResultMapping</span> parentMapping<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultResultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> resultContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: skipRows里面没做什么事情</span>    <span class="token comment">/** 将指针移动到rowBounds.getOffset()指定的行号，即：略过（skip）offset之前的行 */</span>    <span class="token function">skipRows</span><span class="token punctuation">(</span>rsw<span class="token punctuation">.</span><span class="token function">getResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: shouldProcessMoreRows(resultContext, rowBounds) = true    rsw.getResultSet().next() = true</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">shouldProcessMoreRows</span><span class="token punctuation">(</span>resultContext<span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rsw<span class="token punctuation">.</span><span class="token function">getResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/** 解析结果集中的鉴别器&lt;discriminate/&gt; */</span>        <span class="token class-name">ResultMap</span> discriminatedResultMap <span class="token operator">=</span> <span class="token function">resolveDiscriminatedResultMap</span><span class="token punctuation">(</span>rsw<span class="token punctuation">.</span><span class="token function">getResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/** 将数据库操作结果保存到POJO并返回 */</span>        <span class="token class-name">Object</span> rowValue <span class="token operator">=</span> <span class="token function">getRowValue</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> discriminatedResultMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// eg1: rowValue=User{id=2, name='muse2', age=24, userContacts=null}  parentMapping = null</span>        <span class="token comment">/** 存储POJO对象到DefaultResultHandler中 */</span>        <span class="token function">storeObject</span><span class="token punctuation">(</span>resultHandler<span class="token punctuation">,</span> resultContext<span class="token punctuation">,</span> rowValue<span class="token punctuation">,</span> parentMapping<span class="token punctuation">,</span> rsw<span class="token punctuation">.</span><span class="token function">getResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="将数据库操作结果保存到POJO并返回"><a href="#将数据库操作结果保存到POJO并返回" class="headerlink" title="将数据库操作结果保存到POJO并返回"></a>将数据库操作结果保存到POJO并返回</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 将数据库操作结果保存到POJO并返回 */</span><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">getRowValue</span><span class="token punctuation">(</span><span class="token class-name">ResultSetWrapper</span> rsw<span class="token punctuation">,</span> <span class="token class-name">ResultMap</span> resultMap<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">ResultLoaderMap</span> lazyLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultLoaderMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 创建空的结果对象 */</span>    <span class="token class-name">Object</span> rowValue <span class="token operator">=</span> <span class="token function">createResultObject</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> lazyLoader<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: rowValue=User{id=null, name='null', age=null, userContacts=null}   hasTypeHandlerForResultObject(rsw, resultMap.getType())=false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rowValue <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">hasTypeHandlerForResultObject</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/** 创建rowValue的metaObject */</span>        <span class="token keyword">final</span> <span class="token class-name">MetaObject</span> metaObject <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newMetaObject</span><span class="token punctuation">(</span>rowValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// eg1: foundValues = useConstructorMappings = false</span>        <span class="token keyword">boolean</span> foundValues <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>useConstructorMappings<span class="token punctuation">;</span>        <span class="token comment">// eg1: shouldApplyAutomaticMappings(resultMap, false) = true</span>        <span class="token comment">/** 是否应用自动映射 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldApplyAutomaticMappings</span><span class="token punctuation">(</span>resultMap<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// eg1: applyAutomaticMappings(rsw, resultMap, metaObject, null)=true</span>            <span class="token comment">/**             * 将查询出来的值赋值给metaObject中的POJO对象             */</span>            foundValues <span class="token operator">=</span> <span class="token function">applyAutomaticMappings</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> metaObject<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> foundValues<span class="token punctuation">;</span> <span class="token comment">// eg1: foundValues=true</span>        <span class="token punctuation">}</span>        <span class="token comment">// eg1: foundValues=true</span>        foundValues <span class="token operator">=</span> <span class="token function">applyPropertyMappings</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> metaObject<span class="token punctuation">,</span> lazyLoader<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> foundValues<span class="token punctuation">;</span>        <span class="token comment">// eg1: lazyLoader.size()=0   foundValues=true</span>        foundValues <span class="token operator">=</span> lazyLoader<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> foundValues<span class="token punctuation">;</span>        <span class="token comment">// eg1: foundValues=true  configuration.isReturnInstanceForEmptyRow()=false</span>        <span class="token comment">/** configuration.isReturnInstanceForEmptyRow() 当返回行的所有列都是空时，MyBatis默认返回null。当开启这个设置时，MyBatis会返回一个空实例。*/</span>        rowValue <span class="token operator">=</span> <span class="token punctuation">(</span>foundValues <span class="token operator">||</span> configuration<span class="token punctuation">.</span><span class="token function">isReturnInstanceForEmptyRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> rowValue <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rowValue<span class="token punctuation">;</span> <span class="token comment">// eg1: rowValue=User{id=2, name='muse2', age=24, userContacts=null}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="将POJO对象存到DefaultResultHandler"><a href="#将POJO对象存到DefaultResultHandler" class="headerlink" title="将POJO对象存到DefaultResultHandler"></a>将POJO对象存到DefaultResultHandler</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// eg1: rowValue=User{id=2, name='muse2', age=24, userContacts=null}  parentMapping = null</span><span class="token comment">/** * 存储POJO对象到DefaultResultHandler中 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">storeObject</span><span class="token punctuation">(</span><span class="token class-name">ResultHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">DefaultResultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> resultContext<span class="token punctuation">,</span>                         <span class="token class-name">Object</span> rowValue<span class="token punctuation">,</span> <span class="token class-name">ResultMapping</span> parentMapping<span class="token punctuation">,</span> <span class="token class-name">ResultSet</span> rs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token comment">// eg1: parentMapping = null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentMapping <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">linkToParents</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> parentMapping<span class="token punctuation">,</span> rowValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// eg1: resultHandler里保存空size的ArrayList rowValue=User{id=2, name='muse2', age=24, userContacts=null}</span>        <span class="token comment">/** 将结果存储到DefaultResultHandler中 */</span>        <span class="token function">callResultHandler</span><span class="token punctuation">(</span>resultHandler<span class="token punctuation">,</span> resultContext<span class="token punctuation">,</span> rowValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="创建空的结果对象"><a href="#创建空的结果对象" class="headerlink" title="创建空的结果对象"></a>创建空的结果对象</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// eg1: columnPrefix = null</span><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">createResultObject</span><span class="token punctuation">(</span><span class="token class-name">ResultSetWrapper</span> rsw<span class="token punctuation">,</span> <span class="token class-name">ResultMap</span> resultMap<span class="token punctuation">,</span> <span class="token class-name">ResultLoaderMap</span> lazyLoader<span class="token punctuation">,</span>                                  <span class="token class-name">String</span> columnPrefix<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>useConstructorMappings <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// reset previous mapping result</span>    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> constructorArgTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> constructorArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 创建一个空的resultMap.getType()类型的实例对象 */</span>    <span class="token class-name">Object</span> resultObject <span class="token operator">=</span> <span class="token function">createResultObject</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> constructorArgTypes<span class="token punctuation">,</span> constructorArgs<span class="token punctuation">,</span> columnPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: resultObject=User{id=null, name='null', age=null, userContacts=null}</span>    <span class="token comment">//      hasTypeHandlerForResultObject(rsw, resultMap.getType()) = false</span>    <span class="token comment">/** 判断resultMap.getType()是否存在TypeHandler */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultObject <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">hasTypeHandlerForResultObject</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultMapping</span><span class="token punctuation">&gt;</span></span> propertyMappings <span class="token operator">=</span> resultMap<span class="token punctuation">.</span><span class="token function">getPropertyResultMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// eg1: propertyMappings={}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ResultMapping</span> propertyMapping <span class="token operator">:</span> propertyMappings<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">/** 如果是聚合查询并且配置了懒加载 */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>propertyMapping<span class="token punctuation">.</span><span class="token function">getNestedQueryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> propertyMapping<span class="token punctuation">.</span><span class="token function">isLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultObject <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span>resultObject<span class="token punctuation">,</span> lazyLoader<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span>                        objectFactory<span class="token punctuation">,</span> constructorArgTypes<span class="token punctuation">,</span> constructorArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// eg1: resultObject=User{id=null, name='null', age=null, userContacts=null} constructorArgTypes.isEmpty()=true</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>useConstructorMappings <span class="token operator">=</span> <span class="token punctuation">(</span>resultObject <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>constructorArgTypes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eg1: useConstructorMappings = false</span>    <span class="token keyword">return</span> resultObject<span class="token punctuation">;</span> <span class="token comment">// eg1: resultObject=User{id=null, name='null', age=null, userContacts=null}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="创建空的resultMap-getType-类型对象"><a href="#创建空的resultMap-getType-类型对象" class="headerlink" title="创建空的resultMap.getType()类型对象"></a>创建空的resultMap.getType()类型对象</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// eg1: constructorArgTypes={} constructorArgs={} columnPrefix=null</span><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">createResultObject</span><span class="token punctuation">(</span><span class="token class-name">ResultSetWrapper</span> rsw<span class="token punctuation">,</span> <span class="token class-name">ResultMap</span> resultMap<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> constructorArgTypes<span class="token punctuation">,</span>                                  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> constructorArgs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnPrefix<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token comment">// eg1: resultType = vo.User.class</span>    <span class="token comment">/** 获得需要转换为POJO的类型 */</span>    <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultType <span class="token operator">=</span> resultMap<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** 将POJO类型包装成MetaClass */</span>    <span class="token keyword">final</span> <span class="token class-name">MetaClass</span> metaType <span class="token operator">=</span> <span class="token class-name">MetaClass</span><span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span>resultType<span class="token punctuation">,</span> reflectorFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: constructorMappings = {}</span>    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultMapping</span><span class="token punctuation">&gt;</span></span> constructorMappings <span class="token operator">=</span> resultMap<span class="token punctuation">.</span><span class="token function">getConstructorResultMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: hasTypeHandlerForResultObject(rsw, resultType) = false</span>    <span class="token comment">/** 判断resultType是否存在TypeHandler */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasTypeHandlerForResultObject</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/** 创建原始的ResultObject，即：通过配置好的TypeHandler来创建 */</span>        <span class="token keyword">return</span> <span class="token function">createPrimitiveResultObject</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> columnPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// eg1: constructorMappings.isEmpty()=true</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>constructorMappings<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/** 创建参数化的ResultObject */</span>        <span class="token keyword">return</span> <span class="token function">createParameterizedResultObject</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultType<span class="token punctuation">,</span> constructorMappings<span class="token punctuation">,</span> constructorArgTypes<span class="token punctuation">,</span> constructorArgs<span class="token punctuation">,</span> columnPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// eg1: resultType.isInterface()=false  metaType.hasDefaultConstructor()=true</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resultType<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> metaType<span class="token punctuation">.</span><span class="token function">hasDefaultConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// eg1: objectFactory=DefaultObjectFactory  resultType=vo.User.class</span>        <span class="token comment">/** 使用objectFactory初始化User对象*/</span>        <span class="token keyword">return</span> objectFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>resultType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eg1: 返回User{id=null, name='null', age=null, userContacts=null}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldApplyAutomaticMappings</span><span class="token punctuation">(</span>resultMap<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">createByConstructorSignature</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultType<span class="token punctuation">,</span> constructorArgTypes<span class="token punctuation">,</span> constructorArgs<span class="token punctuation">,</span> columnPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Do not know how to create an instance of "</span> <span class="token operator">+</span> resultType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="使用objectFactory初始化User对象"><a href="#使用objectFactory初始化User对象" class="headerlink" title="使用objectFactory初始化User对象"></a>使用objectFactory初始化User对象</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// eg1: type = List.class</span><span class="token comment">// eg1: type=User.class</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">create</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eg1: 生成空集合的ArrayList对象返回</span><span class="token punctuation">}</span><span class="token comment">// eg1: type=List.class  constructorArgTypes=null constructorArgs=null</span><span class="token comment">// eg1: type=User.class  constructorArgTypes=null constructorArgs=null</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> constructorArgTypes<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> constructorArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// eg1: classToCreate=ArrayList.class  type=List.class</span>    <span class="token comment">// eg1: classToCreate=User.class       type=User.class</span>    <span class="token comment">/** 根据type，映射具体的对象类型classToCreate */</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> classToCreate <span class="token operator">=</span> <span class="token function">resolveInterface</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// eg1: 返回空集合的ArrayList对象  classToCreate=ArrayList.class constructorArgTypes=null constructorArgs=null</span>    <span class="token comment">// eg1: 返回User{id=null, name='null', age=null, userContacts=null}  classToCreate=User.class constructorArgTypes=null constructorArgs=null</span>    <span class="token comment">/** 利用反射，生成对象 */</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token function">instantiateClass</span><span class="token punctuation">(</span>classToCreate<span class="token punctuation">,</span> constructorArgTypes<span class="token punctuation">,</span> constructorArgs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo插件换主题以及装饰</title>
      <link href="/2022/01/28/hexo-tian-jia-2d-ren-wu/"/>
      <url>/2022/01/28/hexo-tian-jia-2d-ren-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="页面添加2D人物"><a href="#页面添加2D人物" class="headerlink" title="页面添加2D人物"></a>页面添加2D人物</h1><hr><h2 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h2><p>npm install –save hexo-helper-live2d</p><hr><h3 id="config-yml添加配置"><a href="#config-yml添加配置" class="headerlink" title="_config.yml添加配置"></a>_config.yml添加配置</h3><p>#Live2D<br>##<a href="https://github.com/xiazeyu/live2d-widget.js">https://github.com/xiazeyu/live2d-widget.js</a><br>##<a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init">https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</a><br>live2d:<br>  model:<br>    scale: 1<br>    hHeadPos: 0.5<br>    vHeadPos: 0.618<br>  display:<br>    superSample: 2<br>    width: 150<br>    height: 300<br>    position: right<br>    hOffset: 0<br>    vOffset: -20<br>  mobile:<br>    show: true<br>    scale: 0.5<br>  react:<br>    opacityDefault: 0.7<br>    opacityOnHover: 0.2</p><hr><h3 id="hexo重新编译启动"><a href="#hexo重新编译启动" class="headerlink" title="hexo重新编译启动"></a>hexo重新编译启动</h3><p>hexo clear,hexo g , hexo s</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
